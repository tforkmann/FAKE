@using FSharp.MetadataFormat
@{
  Layout = "apidocstemplate";
  Title = Model.Module.Name + " - " + Properties["project-name"];
  ViewBag.UrlName = Model.Module.UrlName;
  ViewBag.AssemblyName = Model.Module.Assembly.Name;
}

@{
  // Get all the members & comment for the type
  var members = (IEnumerable<Member>)Model.Module.AllMembers;
  var comment = (Comment)Model.Module.Comment;

  // Group all members by their category which is an inline annotation
  // that can be added to members using special XML comment:
  //
  //     /// [category:Something]
  //
  // ...and can be used to categorize members in large modules or types
  // (but if this is not used, then all members end up in just one category)
  var byCategory = members
    .GroupBy(m => m.Category)
    .OrderBy(g => String.IsNullOrEmpty(g.Key) ? "ZZZ" : g.Key)
    .Select((g, n) => new { 
      Index = n, 
      GroupKey = g.Key, 
      Members = g.OrderBy(m => m.Name), 
      Name = String.IsNullOrEmpty(g.Key) ? "Other module members" : g.Key
    });

  // Get nested modules and nested types as statically typed collections
  var nestModules = (IEnumerable<Module>)Model.Module.NestedModules;
  var nestTypes = (IEnumerable<FSharp.MetadataFormat.Type>)Model.Module.NestedTypes;
}
<p>
    @if (Model.Module.IsObsolete)
    {
        <div class="alert alert-warning">
        <h5>OBSOLETE</h5>
        <p>@Html.Encode(@Model.Module.ObsoleteMessage)</p>
        </div> 
    }

</p>
<h1><a name="@Model.Module.Name" class="anchor" href="#@Model.Module.Name">@Model.Module.Name</a></h1>

<div class="xmldoc">
  @foreach (var sec in comment.Sections) {
    // XML comment for the type has multiple sections that can be labelled
    // with categories (to give comment for an individual category). Here, 
    // we print only those that belong to the <default> section.
    if (!byCategory.Any(g => g.GroupKey == sec.Key))
    {
      if (sec.Key != "<default>")        {
        <h2><a name="@sec.Key" class="anchor" href="#@sec.Key">@sec.Key</a></h2>
      }
      @sec.Value  
    }
  }
</div>
@if (byCategory.Count() > 1)
{
  <!-- If there is more than 1 category in the type, generate TOC -->
  <h2>Table of contents</h2>
  <ul>
    @foreach (var g in byCategory)
    {
      <li><a href="@("#section" + g.Index.ToString())">@g.Name</a></li>            
    }
  </ul>
}

<!-- Render nested types and modules, if there are any -->
@if (nestTypes.Count() + nestModules.Count() > 0)
{
  <h2><a name="Nested types and modules" class="anchor" href="#Nested types and modules">Nested types and modules</a></h2>
  <div>
    @RenderPart("part-nested", new {
      Types = nestTypes,
      Modules = nestModules
    })
  </div>
}

@foreach (var g in byCategory)
{
  // Iterate over all the categories and print members. If there are more than one
  // categories, print the category heading (as <h2>) and add XML comment from the type
  // that is related to this specific category.
  if (byCategory.Count() > 1)
  {
    <h2>@g.Name<a name="@("section" + g.Index.ToString())">&#160;</a></h2>    
    var info = comment.Sections.FirstOrDefault(kvp => kvp.Key == g.GroupKey);
    if (info.Key != null)
    {
      <div class="xmldoc">
        @info.Value
      </div>
    }
  }

  @RenderPart("part-members", new { 
      Header = "Functions and values",
      TableHeader = "Function or value",
      Members = g.Members.Where(m => m.Kind == MemberKind.ValueOrFunction)
  })

  @RenderPart("part-members", new { 
      Header = "Type extensions",
      TableHeader = "Type extension",
      Members = g.Members.Where(m => m.Kind == MemberKind.TypeExtension)
  })

  @RenderPart("part-members", new { 
      Header = "Active patterns",
      TableHeader = "Active pattern",
      Members = g.Members.Where(m => m.Kind == MemberKind.ActivePattern)
  })
}
